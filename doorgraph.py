#!/usr/bin/env python
# -*- coding: utf-8 -*-

import sys
import matplotlib.pyplot as plt
import matplotlib.dates as mdates
from datetime import date, datetime, timedelta
import MySQLdb as mdb

def graph(data):
    fig = plt.figure()
    ax = fig.add_subplot(111)
    
    for d in data:
        start = datetime.fromtimestamp(d[0])
        starthour = start.time().hour+start.time().minute/60.0
        end = datetime.fromtimestamp(d[1])
        endhour = end.time().hour+end.time().minute/60.0
        
        # Spans into the next day? Needs splitting!
        if start.date() != end.date():
            ax.vlines(start.date(), starthour, 24, color='g', lw=2)
            ax.vlines(end.date(), 0, endhour, color='g', lw=2)
        else:
            ax.vlines(start.date(), starthour, endhour, color='g', lw=2)
    
    ax.set_ylim(0,24)
    
    ax.set_ylabel(u"Uhrzeit (Stunde)")
    ax.set_title(u"Das FAU FabLab war offen")
    
    ax.xaxis.set_major_locator(mdates.MonthLocator())
    ax.xaxis.set_major_formatter(mdates.DateFormatter('%B'))
    ax.xaxis.set_minor_locator(mdates.WeekdayLocator(interval=7))
    
    ax.grid(True)
    
    fig.autofmt_xdate()

def weeklygraph(data):
    # Reform data to: (datetime(start), duration)
    rdata = map(lambda v: [date.fromtimestamp(v[0]),(v[1]-v[0])/60/60.0], data)

    # normalize to monday
    rdata[0][0] += timedelta(days=-rdata[0][0].weekday())
    weekdata = [rdata[0]]
    for d in rdata[1:]:
        if weekdata[-1][0].isocalendar()[1] == d[0].isocalendar()[1]:
            weekdata[-1][1] += d[1]
        else:
            weekdata.append(d)
            # normalize all dates to monday
            weekdata[-1][0] += timedelta(days=-weekdata[-1][0].weekday())

    fig = plt.figure()
    ax = fig.add_subplot(111)
    barWidth = 6
    ax.bar(map(lambda x: x[0], weekdata), map(lambda x: x[1], weekdata), align='center', width=barWidth)
    ax.xaxis_date()
    
    ax.set_ylabel(u"Geöffnete Stunden pro Woche")
    ax.set_title(u"Öffnungszeiten")
    
    ax.xaxis.set_major_locator(mdates.MonthLocator())
    ax.xaxis.set_major_formatter(mdates.DateFormatter('%B'))
    ax.xaxis.set_minor_locator(mdates.WeekdayLocator(interval=7))
    
    ax.grid(True)
    
    fig.autofmt_xdate()
 
if __name__ == '__main__':
    # Test data
    #data = [(1343694396, 1343694398), (1343903343, 1343903344), (1343906523, 1343913603), (1343916303, 1343916304), (1343916963, 1343916964), (1343917143, 1343917323), (1343934801, 1343934802), (1344074541, 1344074542), (1344074721, 1344080841), (1344081261, 1344102621), (1344256041, 1344257421), (1344268401, 1344268402), (1344280221, 1344280222), (1344321921, 1344321922), (1344403881, 1344404061), (1344509121, 1344519681), (1344523461, 1344539061), (1344609081, 1344625701), (1344626781, 1344627621), (1344780081, 1344780141), (1344780681, 1344780682), (1344852981, 1344853161), (1344863481, 1344872061), (1344923421, 1344923422), (1344938901, 1344946521), (1345005321, 1345005441), (1345034721, 1345046121), (1345046241, 1345046242), (1345054881, 1345059921), (1345105521, 1345106721), (1345107741, 1345111519), (1345112781, 1345130721), (1345182261, 1345182262), (1345291161, 1345309281), (1345473921, 1345483161), (1345527081, 1345527082), (1345569801, 1345574661), (1345609881, 1345610061), (1345645341, 1345647261), (1345810281, 1345833861), (1345835361, 1345847601), (1345855941, 1345857921), (1346079380, 1346079381), (1346131401, 1346131402), (1346168301, 1346173581), (1346219901, 1346220021), (1346310321, 1346310322), (1346335221, 1346338581), (1346395881, 1346395882), (1346413821, 1346413822), (1346506640, 1346515161), (1346515341, 1346516962), (1346677821, 1346680341), (1346703021, 1346709741), (1346740641, 1346740701), (1346748981, 1346749341), (1346750541, 1346755341), (1346755641, 1346767701), (1346768121, 1346768122), (1346768301, 1346771661), (1346771961, 1346774301), (1346823561, 1346823801), (1346841501, 1346844621), (1346845881, 1346852661), (1346853681, 1346863761), (1346941159, 1346947101), (1346947219, 1346949261), (1347000861, 1347000919), (1347198561, 1347204139), (1347204261, 1347207921), (1347274759, 1347274760), (1347287721, 1347293001), (1347305539, 1347310341), (1347345201, 1347345202), (1347370701, 1347371061), (1347427701, 1347427881), (1347436462, 1347436521), (1347447201, 1347447561), (1347447801, 1347449421), (1347449661, 1347450261), (1347456081, 1347456559), (1347457401, 1347457519), (1347461540, 1347461541), (1347464901, 1347464961), (1347537261, 1347537441), (1347628521, 1347628581), (1347709341, 1347725841), (1348034841, 1348034901), (1348047801, 1348047802), (1348058901, 1348061481), (1348144941, 1348152801), (1348473142, 1348474281), (1348474881, 1348487361), (1348488919, 1348488920), (1348490961, 1348491201), (1348499001, 1348499002), (1348555880, 1348555881), (1348673181, 1348678881), (1348736781, 1348741701), (1348822521, 1348829661), (1348830081, 1348830261), (1348833801, 1348833921), (1348834101, 1348834102), (1348834581, 1348838961), (1348919481, 1348920381), (1348920501, 1348934841), (1349098701, 1349103321), (1349156901, 1349156902), (1349180601, 1349181081), (1349184561, 1349184562), (1349292081, 1349294540), (1349337081, 1349339961), (1349340081, 1349340082), (1349341401, 1349345541), (1349416521, 1349416522), (1349689161, 1349690421), (1349695761, 1349696541), (1349772201, 1349774241), (1349775861, 1349801901), (1349844321, 1349844501), (1349878641, 1349878642), (1349890881, 1349890882), (1350021560, 1350021561), (1350033081, 1350033501), (1350035241, 1350049161), (1350056061, 1350065721), (1350066741, 1350070821), (1350119179, 1350154041), (1350154461, 1350155301), (1350156681, 1350156861), (1350157101, 1350157401), (1350157641, 1350158242), (1350170961, 1350170962), (1350284241, 1350318619), (1350326601, 1350326961), (1350383842, 1350396021), (1350452121, 1350452301), (1350469821, 1350473181), (1350475281, 1350482361), (1350496401, 1350497901), (1350555621, 1350562701), (1350562821, 1350573681), (1350575361, 1350579861), (1350622459, 1350622460), (1350627321, 1350632001), (1350637161, 1350638061), (1350641721, 1350647601), (1350649521, 1350649522), (1350657081, 1350657082), (1350675561, 1350675681), (1350893901, 1350893902), (1350898161, 1350899361), (1350901941, 1350901942), (1350902061, 1350902062), (1350911840, 1350911841), (1350914301, 1350914302), (1350914421, 1350915860), (1350916101, 1350929001), (1350937761, 1350937762), (1350938901, 1350941781), (1350988101, 1351003281), (1351054640, 1351054641), (1351057941, 1351058061), (1351074741, 1351088061), (1351090881, 1351091901), (1351096101, 1351099161), (1351099641, 1351100361), (1351101561, 1351101562), (1351101981, 1351103361), (1351103901, 1351104921), (1351156101, 1351173441), (1351181721, 1351184841), (1351253001, 1351254921), (1351338862, 1351339341), (1351339461, 1351358001), (1351436181, 1351439061), (1351454901, 1351465581), (1351501099, 1351501100), (1351503202, 1351503981), (1351504821, 1351506621), (1351521321, 1351521322), (1351522341, 1351534221), (1351541541, 1351541542), (1351596081, 1351606821), (1351618701, 1351618881), (1351624579, 1351625361), (1351625541, 1351626321), (1351627161, 1351627521), (1351627881, 1351628361), (1351631181, 1351633161), (1351633401, 1351634061), (1351634541, 1351634542), (1351636401, 1351636461), (1351673361, 1351673421), (1351676421, 1351676841), (1351686741, 1351691721), (1351691961, 1351709779), (1351773801, 1351775481), (1351876221, 1351890921), (1351959141, 1351959201), (1352113461, 1352113462), (1352130981, 1352131161), (1352139621, 1352139622), (1352140521, 1352142561), (1352149281, 1352156601), (1352184321, 1352184322), (1352197701, 1352197702), (1352201661, 1352216961), (1352221401, 1352221402), (1352223861, 1352223862), (1352227461, 1352227462), (1352267301, 1352267541), (1352293341, 1352320521), (1352323041, 1352327421), (1352331681, 1352335401), (1352372061, 1352396001), (1352397082, 1352397141), (1352397381, 1352399541), (1352445861, 1352447059), (1352465661, 1352478321), (1352552181, 1352572520), (1352721561, 1352721562), (1352728279, 1352728280), (1352732841, 1352749161), (1352789241, 1352789242), (1352799681, 1352803281), (1352805981, 1352819661), (1352839281, 1352839282), (1352872821, 1352873001), (1352883922, 1352891361), (1352892021, 1352907019), (1352911700, 1352911761), (1352912061, 1352914041), (1352918361, 1352919681), (1352930361, 1352930362), (1352975601, 1353010281), (1353045861, 1353046881), (1353050841, 1353051021), (1353051621, 1353053181), (1353056061, 1353063861), (1353064161, 1353064220), (1353070581, 1353074841), (1353078501, 1353078502), (1353081141, 1353081142), (1353083421, 1353083422), (1353271281, 1353272062), (1353328161, 1353329661), (1353329961, 1353345741), (1353369261, 1353369262), (1353373041, 1353373521), (1353394521, 1353394522), (1353410481, 1353424341), (1353432561, 1353432562), (1353435141, 1353442581), (1353476421, 1353476601), (1353480861, 1353480862), (1353501381, 1353516022), (1353541521, 1353541522), (1353581901, 1353600201), (1353600741, 1353603981), (1353655701, 1353655702), (1353687441, 1353687921), (1353697521, 1353703881), (1353761781, 1353778341), (1353778641, 1353785121), (1353917241, 1353919522), (1353933381, 1353951141), (1353959481, 1353963561), (1354001481, 1354001482), (1354015761, 1354028601), (1354081221, 1354081401), (1354097181, 1354101021), (1354107741, 1354117340), (1354139601, 1354139602), (1354140081, 1354140141), (1354171641, 1354172421), (1354173921, 1354174101), (1354174761, 1354185381), (1354185981, 1354207221), (1354207701, 1354207702), (1354207822, 1354210641), (1354220481, 1354224801), (1354259841, 1354259901), (1354260321, 1354262241), (1354263261, 1354264521), (1354269020, 1354269141), (1354270101, 1354272021), (1354285221, 1354293861), (1354298721, 1354298722), (1354300941, 1354301961), (1354361481, 1354363581), (1354377081, 1354383681), (1354448721, 1354450101), (1354474941, 1354477641), (1354477821, 1354499781), (1354540401, 1354540521), (1354540761, 1354571061), (1354571302, 1354571303), (1354576341, 1354579341), (1354605081, 1354605082), (1354618941, 1354630461), (1354640121, 1354642761), (1354686321, 1354686501), (1354697541, 1354697841), (1354700421, 1354700781), (1354705641, 1354705642), (1354706481, 1354706482), (1354708161, 1354708162), (1354712181, 1354723101), (1354732641, 1354733961), (1354791261, 1354813161), (1354830081, 1354839141), (1354861221, 1354861222), (1354889481, 1354889482), (1354898061, 1354898181), (1354916661, 1354916721), (1354917202, 1354917321), (1354971681, 1354992981), (1354995040, 1354998561), (1355139981, 1355142681), (1355151141, 1355167641), (1355169321, 1355169739), (1355172561, 1355178261), (1355210959, 1355210960), (1355224281, 1355224641), (1355225061, 1355242581), (1355244621, 1355245041), (1355245281, 1355264240), (1355264721, 1355264781), (1355265381, 1355265382), (1355288361, 1355288601), (1355304381, 1355305041), (1355305340, 1355328921), (1355333001, 1355333002), (1355392701, 1355393481), (1355394561, 1355423001), (1355469561, 1355469562), (1355479041, 1355492601), (1355493201, 1355497701)]
    
    # Import from MySQL
    data = []
    con = mdb.connect('127.0.0.1', 'fablab-er', 'XXXXXXXXXX', 'fablab-er_drupal')
    cur = con.cursor()
    cur.execute("SELECT `starttime`, `endtime` FROM `fablab_doorstate` WHERE `starttime` >= UNIX_TIMESTAMP(MAKEDATE(2014, 1)) AND `endtime` < UNIX_TIMESTAMP(MAKEDATE(2015, 1))")
    data = cur.fetchall()
    
    # Plotting
    weeklygraph(data)
    plt.savefig('weekly.png')
    plt.clf()
    plt.cla()
    graph(data)
    plt.savefig('usage.png')
